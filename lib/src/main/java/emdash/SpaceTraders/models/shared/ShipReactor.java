/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package emdash.SpaceTraders.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ShipReactor - The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
 */
public class ShipReactor {
    /**
     * Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public Long condition;

    public ShipReactor withCondition(Long condition) {
        this.condition = condition;
        return this;
    }
    
    @JsonProperty("description")
    public String description;

    public ShipReactor withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public ShipReactor withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("powerOutput")
    public Long powerOutput;

    public ShipReactor withPowerOutput(Long powerOutput) {
        this.powerOutput = powerOutput;
        return this;
    }
    
    /**
     * The requirements for installation on a ship
     */
    @JsonProperty("requirements")
    public ShipRequirements requirements;

    public ShipReactor withRequirements(ShipRequirements requirements) {
        this.requirements = requirements;
        return this;
    }
    
    @JsonProperty("symbol")
    public ShipReactorSymbol symbol;

    public ShipReactor withSymbol(ShipReactorSymbol symbol) {
        this.symbol = symbol;
        return this;
    }
    
    public ShipReactor(@JsonProperty("description") String description, @JsonProperty("name") String name, @JsonProperty("powerOutput") Long powerOutput, @JsonProperty("requirements") ShipRequirements requirements, @JsonProperty("symbol") ShipReactorSymbol symbol) {
        this.description = description;
        this.name = name;
        this.powerOutput = powerOutput;
        this.requirements = requirements;
        this.symbol = symbol;
  }
}
