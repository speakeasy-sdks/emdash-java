/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package emdash.SpaceTraders.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import emdash.SpaceTraders.utils.DateTimeDeserializer;
import emdash.SpaceTraders.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

public class MarketTransaction {
    /**
     * The price per unit of the transaction.
     */
    @JsonProperty("pricePerUnit")
    public Long pricePerUnit;

    public MarketTransaction withPricePerUnit(Long pricePerUnit) {
        this.pricePerUnit = pricePerUnit;
        return this;
    }
    
    /**
     * The symbol of the ship that made the transaction.
     */
    @JsonProperty("shipSymbol")
    public String shipSymbol;

    public MarketTransaction withShipSymbol(String shipSymbol) {
        this.shipSymbol = shipSymbol;
        return this;
    }
    
    /**
     * The timestamp of the transaction.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timestamp")
    public OffsetDateTime timestamp;

    public MarketTransaction withTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * The total price of the transaction.
     */
    @JsonProperty("totalPrice")
    public Long totalPrice;

    public MarketTransaction withTotalPrice(Long totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }
    
    /**
     * The symbol of the trade good.
     */
    @JsonProperty("tradeSymbol")
    public String tradeSymbol;

    public MarketTransaction withTradeSymbol(String tradeSymbol) {
        this.tradeSymbol = tradeSymbol;
        return this;
    }
    
    /**
     * The type of transaction.
     */
    @JsonProperty("type")
    public MarketTransactionType type;

    public MarketTransaction withType(MarketTransactionType type) {
        this.type = type;
        return this;
    }
    
    /**
     * The number of units of the transaction.
     */
    @JsonProperty("units")
    public Long units;

    public MarketTransaction withUnits(Long units) {
        this.units = units;
        return this;
    }
    
    /**
     * The symbol of the waypoint where the transaction took place.
     */
    @JsonProperty("waypointSymbol")
    public String waypointSymbol;

    public MarketTransaction withWaypointSymbol(String waypointSymbol) {
        this.waypointSymbol = waypointSymbol;
        return this;
    }
    
    public MarketTransaction(@JsonProperty("pricePerUnit") Long pricePerUnit, @JsonProperty("shipSymbol") String shipSymbol, @JsonProperty("timestamp") OffsetDateTime timestamp, @JsonProperty("totalPrice") Long totalPrice, @JsonProperty("tradeSymbol") String tradeSymbol, @JsonProperty("type") MarketTransactionType type, @JsonProperty("units") Long units, @JsonProperty("waypointSymbol") String waypointSymbol) {
        this.pricePerUnit = pricePerUnit;
        this.shipSymbol = shipSymbol;
        this.timestamp = timestamp;
        this.totalPrice = totalPrice;
        this.tradeSymbol = tradeSymbol;
        this.type = type;
        this.units = units;
        this.waypointSymbol = waypointSymbol;
  }
}
