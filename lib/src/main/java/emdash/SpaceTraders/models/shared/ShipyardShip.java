/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package emdash.SpaceTraders.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ShipyardShip {
    @JsonProperty("description")
    public String description;

    public ShipyardShip withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The engine determines how quickly a ship travels between waypoints.
     */
    @JsonProperty("engine")
    public ShipEngine engine;

    public ShipyardShip withEngine(ShipEngine engine) {
        this.engine = engine;
        return this;
    }
    
    /**
     * The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
     */
    @JsonProperty("frame")
    public ShipFrame frame;

    public ShipyardShip withFrame(ShipFrame frame) {
        this.frame = frame;
        return this;
    }
    
    @JsonProperty("modules")
    public ShipModule[] modules;

    public ShipyardShip withModules(ShipModule[] modules) {
        this.modules = modules;
        return this;
    }
    
    @JsonProperty("mounts")
    public ShipMount[] mounts;

    public ShipyardShip withMounts(ShipMount[] mounts) {
        this.mounts = mounts;
        return this;
    }
    
    @JsonProperty("name")
    public String name;

    public ShipyardShip withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("purchasePrice")
    public Long purchasePrice;

    public ShipyardShip withPurchasePrice(Long purchasePrice) {
        this.purchasePrice = purchasePrice;
        return this;
    }
    
    /**
     * The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
     */
    @JsonProperty("reactor")
    public ShipReactor reactor;

    public ShipyardShip withReactor(ShipReactor reactor) {
        this.reactor = reactor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public ShipType type;

    public ShipyardShip withType(ShipType type) {
        this.type = type;
        return this;
    }
    
    public ShipyardShip(@JsonProperty("description") String description, @JsonProperty("engine") ShipEngine engine, @JsonProperty("frame") ShipFrame frame, @JsonProperty("modules") ShipModule[] modules, @JsonProperty("mounts") ShipMount[] mounts, @JsonProperty("name") String name, @JsonProperty("purchasePrice") Long purchasePrice, @JsonProperty("reactor") ShipReactor reactor) {
        this.description = description;
        this.engine = engine;
        this.frame = frame;
        this.modules = modules;
        this.mounts = mounts;
        this.name = name;
        this.purchasePrice = purchasePrice;
        this.reactor = reactor;
  }
}
