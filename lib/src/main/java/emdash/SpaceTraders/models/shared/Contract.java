/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package emdash.SpaceTraders.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import emdash.SpaceTraders.utils.DateTimeDeserializer;
import emdash.SpaceTraders.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

public class Contract {
    /**
     * Whether the contract has been accepted by the agent
     */
    @JsonProperty("accepted")
    public Boolean accepted;

    public Contract withAccepted(Boolean accepted) {
        this.accepted = accepted;
        return this;
    }
    
    /**
     * The time at which the contract is no longer available to be accepted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deadlineToAccept")
    public OffsetDateTime deadlineToAccept;

    public Contract withDeadlineToAccept(OffsetDateTime deadlineToAccept) {
        this.deadlineToAccept = deadlineToAccept;
        return this;
    }
    
    /**
     * Deprecated in favor of deadlineToAccept
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration")
    public OffsetDateTime expiration;

    public Contract withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * The symbol of the faction that this contract is for.
     */
    @JsonProperty("factionSymbol")
    public String factionSymbol;

    public Contract withFactionSymbol(String factionSymbol) {
        this.factionSymbol = factionSymbol;
        return this;
    }
    
    /**
     * Whether the contract has been fulfilled
     */
    @JsonProperty("fulfilled")
    public Boolean fulfilled;

    public Contract withFulfilled(Boolean fulfilled) {
        this.fulfilled = fulfilled;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public Contract withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("terms")
    public ContractTerms terms;

    public Contract withTerms(ContractTerms terms) {
        this.terms = terms;
        return this;
    }
    
    @JsonProperty("type")
    public ContractType type;

    public Contract withType(ContractType type) {
        this.type = type;
        return this;
    }
    
    public Contract(@JsonProperty("accepted") Boolean accepted, @JsonProperty("expiration") OffsetDateTime expiration, @JsonProperty("factionSymbol") String factionSymbol, @JsonProperty("fulfilled") Boolean fulfilled, @JsonProperty("id") String id, @JsonProperty("terms") ContractTerms terms, @JsonProperty("type") ContractType type) {
        this.accepted = accepted;
        this.expiration = expiration;
        this.factionSymbol = factionSymbol;
        this.fulfilled = fulfilled;
        this.id = id;
        this.terms = terms;
        this.type = type;
  }
}
