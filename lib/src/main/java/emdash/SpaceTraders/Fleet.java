/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package emdash.SpaceTraders;

import com.fasterxml.jackson.databind.ObjectMapper;
import emdash.SpaceTraders.utils.HTTPClient;
import emdash.SpaceTraders.utils.HTTPRequest;
import emdash.SpaceTraders.utils.JSON;
import emdash.SpaceTraders.utils.SerializedBody;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;

/**
 * Fleet
 */
public class Fleet {
	
	private SDKConfiguration sdkConfiguration;

	public Fleet(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Create Chart
     * Command a ship to chart the current waypoint.
     * 
     * Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
     * 
     * Charting a location will record your agent as the one who created the chart.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.CreateChartResponse createChart(emdash.SpaceTraders.models.operations.CreateChartRequest request, emdash.SpaceTraders.models.operations.CreateChartSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.CreateChartRequest.class, baseUrl, "/my/ships/{shipSymbol}/chart", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.CreateChartResponse res = new emdash.SpaceTraders.models.operations.CreateChartResponse(contentType, httpRes.statusCode()) {{
            createChart201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.CreateChart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.CreateChart201ApplicationJSON.class);
                res.createChart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Scan Ships
     * Activate your ship's sensor arrays to scan for ship information.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.CreateShipShipScanResponse createShipShipScan(emdash.SpaceTraders.models.operations.CreateShipShipScanRequest request, emdash.SpaceTraders.models.operations.CreateShipShipScanSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.CreateShipShipScanRequest.class, baseUrl, "/my/ships/{shipSymbol}/scan/ships", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.CreateShipShipScanResponse res = new emdash.SpaceTraders.models.operations.CreateShipShipScanResponse(contentType, httpRes.statusCode()) {{
            createShipShipScan201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.CreateShipShipScan201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.CreateShipShipScan201ApplicationJSON.class);
                res.createShipShipScan201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Scan Systems
     * Activate your ship's sensor arrays to scan for system information.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.CreateShipSystemScanResponse createShipSystemScan(emdash.SpaceTraders.models.operations.CreateShipSystemScanRequest request, emdash.SpaceTraders.models.operations.CreateShipSystemScanSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.CreateShipSystemScanRequest.class, baseUrl, "/my/ships/{shipSymbol}/scan/systems", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.CreateShipSystemScanResponse res = new emdash.SpaceTraders.models.operations.CreateShipSystemScanResponse(contentType, httpRes.statusCode()) {{
            createShipSystemScan201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.CreateShipSystemScan201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.CreateShipSystemScan201ApplicationJSON.class);
                res.createShipSystemScan201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Scan Waypoints
     * Activate your ship's sensor arrays to scan for waypoint information.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.CreateShipWaypointScanResponse createShipWaypointScan(emdash.SpaceTraders.models.operations.CreateShipWaypointScanRequest request, emdash.SpaceTraders.models.operations.CreateShipWaypointScanSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.CreateShipWaypointScanRequest.class, baseUrl, "/my/ships/{shipSymbol}/scan/waypoints", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.CreateShipWaypointScanResponse res = new emdash.SpaceTraders.models.operations.CreateShipWaypointScanResponse(contentType, httpRes.statusCode()) {{
            createShipWaypointScan201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.CreateShipWaypointScan201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.CreateShipWaypointScan201ApplicationJSON.class);
                res.createShipWaypointScan201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create Survey
     * If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
     * 
     * Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.CreateSurveyResponse createSurvey(emdash.SpaceTraders.models.operations.CreateSurveyRequest request, emdash.SpaceTraders.models.operations.CreateSurveySecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.CreateSurveyRequest.class, baseUrl, "/my/ships/{shipSymbol}/survey", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.CreateSurveyResponse res = new emdash.SpaceTraders.models.operations.CreateSurveyResponse(contentType, httpRes.statusCode()) {{
            createSurvey201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.CreateSurvey201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.CreateSurvey201ApplicationJSON.class);
                res.createSurvey201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Dock Ship
     * Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.DockShipResponse dockShip(emdash.SpaceTraders.models.operations.DockShipRequest request, emdash.SpaceTraders.models.operations.DockShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.DockShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/dock", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.DockShipResponse res = new emdash.SpaceTraders.models.operations.DockShipResponse(contentType, httpRes.statusCode()) {{
            dockShip200Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.DockShipDockShip200Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.DockShipDockShip200Response.class);
                res.dockShip200Response = out;
            }
        }

        return res;
    }

    /**
     * Extract Resources
     * Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.ExtractResourcesResponse extractResources(emdash.SpaceTraders.models.operations.ExtractResourcesRequest request, emdash.SpaceTraders.models.operations.ExtractResourcesSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.ExtractResourcesRequest.class, baseUrl, "/my/ships/{shipSymbol}/extract", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.ExtractResourcesResponse res = new emdash.SpaceTraders.models.operations.ExtractResourcesResponse(contentType, httpRes.statusCode()) {{
            extractResources201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.ExtractResources201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.ExtractResources201ApplicationJSON.class);
                res.extractResources201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get Ship
     * Retrieve the details of your ship.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.GetMyShipResponse getMyShip(emdash.SpaceTraders.models.operations.GetMyShipRequest request, emdash.SpaceTraders.models.operations.GetMyShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.GetMyShipRequest.class, baseUrl, "/my/ships/{shipSymbol}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.GetMyShipResponse res = new emdash.SpaceTraders.models.operations.GetMyShipResponse(contentType, httpRes.statusCode()) {{
            getMyShip200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.GetMyShip200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.GetMyShip200ApplicationJSON.class);
                res.getMyShip200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get Ship Cargo
     * Retrieve the cargo of your ship.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.GetMyShipCargoResponse getMyShipCargo(emdash.SpaceTraders.models.operations.GetMyShipCargoRequest request, emdash.SpaceTraders.models.operations.GetMyShipCargoSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.GetMyShipCargoRequest.class, baseUrl, "/my/ships/{shipSymbol}/cargo", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.GetMyShipCargoResponse res = new emdash.SpaceTraders.models.operations.GetMyShipCargoResponse(contentType, httpRes.statusCode()) {{
            getMyShipCargo200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.GetMyShipCargo200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.GetMyShipCargo200ApplicationJSON.class);
                res.getMyShipCargo200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * List Ships
     * Retrieve all of your ships.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.GetMyShipsResponse getMyShips(emdash.SpaceTraders.models.operations.GetMyShipsRequest request, emdash.SpaceTraders.models.operations.GetMyShipsSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(baseUrl, "/my/ships");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = emdash.SpaceTraders.utils.Utils.getQueryParams(emdash.SpaceTraders.models.operations.GetMyShipsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.GetMyShipsResponse res = new emdash.SpaceTraders.models.operations.GetMyShipsResponse(contentType, httpRes.statusCode()) {{
            getMyShips200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.GetMyShips200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.GetMyShips200ApplicationJSON.class);
                res.getMyShips200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Get Ship Cooldown
     * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
     * 
     * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
     * 
     * Response returns a 204 status code (no-content) when the ship has no cooldown.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.GetShipCooldownResponse getShipCooldown(emdash.SpaceTraders.models.operations.GetShipCooldownRequest request, emdash.SpaceTraders.models.operations.GetShipCooldownSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.GetShipCooldownRequest.class, baseUrl, "/my/ships/{shipSymbol}/cooldown", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.GetShipCooldownResponse res = new emdash.SpaceTraders.models.operations.GetShipCooldownResponse(contentType, httpRes.statusCode()) {{
            getShipCooldown200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.GetShipCooldown200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.GetShipCooldown200ApplicationJSON.class);
                res.getShipCooldown200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Get Ship Nav
     * Get the current nav status of a ship.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.GetShipNavResponse getShipNav(emdash.SpaceTraders.models.operations.GetShipNavRequest request, emdash.SpaceTraders.models.operations.GetShipNavSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.GetShipNavRequest.class, baseUrl, "/my/ships/{shipSymbol}/nav", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.GetShipNavResponse res = new emdash.SpaceTraders.models.operations.GetShipNavResponse(contentType, httpRes.statusCode()) {{
            getShipNav200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.GetShipNav200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.GetShipNav200ApplicationJSON.class);
                res.getShipNav200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Jettison Cargo
     * Jettison cargo from your ship's cargo hold.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.JettisonResponse jettison(emdash.SpaceTraders.models.operations.JettisonRequest request, emdash.SpaceTraders.models.operations.JettisonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.JettisonRequest.class, baseUrl, "/my/ships/{shipSymbol}/jettison", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.JettisonResponse res = new emdash.SpaceTraders.models.operations.JettisonResponse(contentType, httpRes.statusCode()) {{
            jettison200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.Jettison200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.Jettison200ApplicationJSON.class);
                res.jettison200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Jump Ship
     * Jump your ship instantly to a target system. When used while in orbit or docked to a jump gate waypoint, any ship can use this command. When used elsewhere, jumping requires a jump drive unit and consumes a unit of antimatter (which needs to be in your cargo).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.JumpShipResponse jumpShip(emdash.SpaceTraders.models.operations.JumpShipRequest request, emdash.SpaceTraders.models.operations.JumpShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.JumpShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/jump", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.JumpShipResponse res = new emdash.SpaceTraders.models.operations.JumpShipResponse(contentType, httpRes.statusCode()) {{
            jumpShip200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.JumpShip200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.JumpShip200ApplicationJSON.class);
                res.jumpShip200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Navigate Ship
     * Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * 
     * To travel between systems, see the ship's warp or jump actions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.NavigateShipResponse navigateShip(emdash.SpaceTraders.models.operations.NavigateShipRequest request, emdash.SpaceTraders.models.operations.NavigateShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.NavigateShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/navigate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.NavigateShipResponse res = new emdash.SpaceTraders.models.operations.NavigateShipResponse(contentType, httpRes.statusCode()) {{
            navigateShip200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.NavigateShip200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.NavigateShip200ApplicationJSON.class);
                res.navigateShip200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Negotiate Contract
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.NegotiateContractResponse negotiateContract(emdash.SpaceTraders.models.operations.NegotiateContractRequest request, emdash.SpaceTraders.models.operations.NegotiateContractSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.NegotiateContractRequest.class, baseUrl, "/my/ships/{shipSymbol}/negotiate/contract", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.NegotiateContractResponse res = new emdash.SpaceTraders.models.operations.NegotiateContractResponse(contentType, httpRes.statusCode()) {{
            negotiateContract200Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.NegotiateContractNegotiateContract200Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.NegotiateContractNegotiateContract200Response.class);
                res.negotiateContract200Response = out;
            }
        }

        return res;
    }

    /**
     * Orbit Ship
     * Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
     * 
     * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.OrbitShipResponse orbitShip(emdash.SpaceTraders.models.operations.OrbitShipRequest request, emdash.SpaceTraders.models.operations.OrbitShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.OrbitShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/orbit", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.OrbitShipResponse res = new emdash.SpaceTraders.models.operations.OrbitShipResponse(contentType, httpRes.statusCode()) {{
            orbitShip200Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.OrbitShipOrbitShip200Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.OrbitShipOrbitShip200Response.class);
                res.orbitShip200Response = out;
            }
        }

        return res;
    }

    /**
     * Patch Ship Nav
     * Update the nav data of a ship, such as the flight mode.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.PatchShipNavResponse patchShipNav(emdash.SpaceTraders.models.operations.PatchShipNavRequest request, emdash.SpaceTraders.models.operations.PatchShipNavSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.PatchShipNavRequest.class, baseUrl, "/my/ships/{shipSymbol}/nav", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.PatchShipNavResponse res = new emdash.SpaceTraders.models.operations.PatchShipNavResponse(contentType, httpRes.statusCode()) {{
            patchShipNav200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.PatchShipNav200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.PatchShipNav200ApplicationJSON.class);
                res.patchShipNav200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Purchase Cargo
     * Purchase cargo.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.PurchaseCargoResponse purchaseCargo(emdash.SpaceTraders.models.operations.PurchaseCargoRequest request, emdash.SpaceTraders.models.operations.PurchaseCargoSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.PurchaseCargoRequest.class, baseUrl, "/my/ships/{shipSymbol}/purchase", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.PurchaseCargoResponse res = new emdash.SpaceTraders.models.operations.PurchaseCargoResponse(contentType, httpRes.statusCode()) {{
            purchaseCargo201Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.PurchaseCargoPurchaseCargo201Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.PurchaseCargoPurchaseCargo201Response.class);
                res.purchaseCargo201Response = out;
            }
        }

        return res;
    }

    /**
     * Purchase Ship
     * Purchase a ship
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.PurchaseShipResponse purchaseShip(emdash.SpaceTraders.models.operations.PurchaseShipRequestBody request, emdash.SpaceTraders.models.operations.PurchaseShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(baseUrl, "/my/ships");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.PurchaseShipResponse res = new emdash.SpaceTraders.models.operations.PurchaseShipResponse(contentType, httpRes.statusCode()) {{
            purchaseShip201ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.PurchaseShip201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.PurchaseShip201ApplicationJSON.class);
                res.purchaseShip201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Refuel Ship
     * Refuel your ship from the local market.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.RefuelShipResponse refuelShip(emdash.SpaceTraders.models.operations.RefuelShipRequest request, emdash.SpaceTraders.models.operations.RefuelShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.RefuelShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/refuel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.RefuelShipResponse res = new emdash.SpaceTraders.models.operations.RefuelShipResponse(contentType, httpRes.statusCode()) {{
            refuelShip200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.RefuelShip200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.RefuelShip200ApplicationJSON.class);
                res.refuelShip200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Sell Cargo
     * Sell cargo.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.SellCargoResponse sellCargo(emdash.SpaceTraders.models.operations.SellCargoRequest request, emdash.SpaceTraders.models.operations.SellCargoSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.SellCargoRequest.class, baseUrl, "/my/ships/{shipSymbol}/sell", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.SellCargoResponse res = new emdash.SpaceTraders.models.operations.SellCargoResponse(contentType, httpRes.statusCode()) {{
            sellCargo201Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.SellCargoSellCargo201Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.SellCargoSellCargo201Response.class);
                res.sellCargo201Response = out;
            }
        }

        return res;
    }

    /**
     * Ship Refine
     * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.ShipRefineResponse shipRefine(emdash.SpaceTraders.models.operations.ShipRefineRequest request, emdash.SpaceTraders.models.operations.ShipRefineSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.ShipRefineRequest.class, baseUrl, "/my/ships/{shipSymbol}/refine", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.ShipRefineResponse res = new emdash.SpaceTraders.models.operations.ShipRefineResponse(contentType, httpRes.statusCode()) {{
            shipRefine200Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.ShipRefineShipRefine200Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.ShipRefineShipRefine200Response.class);
                res.shipRefine200Response = out;
            }
        }

        return res;
    }

    /**
     * Transfer Cargo
     * Transfer cargo between ships.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.TransferCargoResponse transferCargo(emdash.SpaceTraders.models.operations.TransferCargoRequest request, emdash.SpaceTraders.models.operations.TransferCargoSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.TransferCargoRequest.class, baseUrl, "/my/ships/{shipSymbol}/transfer", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.TransferCargoResponse res = new emdash.SpaceTraders.models.operations.TransferCargoResponse(contentType, httpRes.statusCode()) {{
            transferCargo200Response = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.TransferCargoTransferCargo200Response out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.TransferCargoTransferCargo200Response.class);
                res.transferCargo200Response = out;
            }
        }

        return res;
    }

    /**
     * Warp Ship
     * Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
     * 
     * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public emdash.SpaceTraders.models.operations.WarpShipResponse warpShip(emdash.SpaceTraders.models.operations.WarpShipRequest request, emdash.SpaceTraders.models.operations.WarpShipSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = emdash.SpaceTraders.utils.Utils.generateURL(emdash.SpaceTraders.models.operations.WarpShipRequest.class, baseUrl, "/my/ships/{shipSymbol}/warp", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = emdash.SpaceTraders.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = emdash.SpaceTraders.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        emdash.SpaceTraders.models.operations.WarpShipResponse res = new emdash.SpaceTraders.models.operations.WarpShipResponse(contentType, httpRes.statusCode()) {{
            warpShip200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (emdash.SpaceTraders.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                emdash.SpaceTraders.models.operations.WarpShip200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), emdash.SpaceTraders.models.operations.WarpShip200ApplicationJSON.class);
                res.warpShip200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}